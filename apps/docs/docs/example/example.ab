import stdlib as Thing from "github.com/arborlang/stdlib";

type Thing {}

fn performAction(v?: number) -> number {
	return v * v ?? 1
}


fn Thing::doSomething() {
	let val = await something() // Await is a key word to enable cooperative scheduling.
	let someChan = go performAction() // go spawns a new green thread, and returns a communications channel
	doSomethingElse()
	let value = <-someChan // wait for someChan to have data on it. Value will have type of number;
}

fn Thing::somethingCrazier() {
	let channelA = go performAction();
	let channelB = go fn(pipe: Pipe<number>) {
		for let v <- pipe {
			yield performAction(v)
		}
	}
	let timeOutChan = go timeOut(2000)
	select {
		case let v <- channelA: 
			stdlib.print("value from A is:", v)
		case let v <- channelB: 
		    stdlib.print("value from B is:", v)
		case <- timeOutChan:
		    close(channelB)
			break;
		default:
		    channelB <- 2
	}
}

fn main() -> int {
	const thing = new Thing();
	thing.doSomething(); // Blocking
	thing.doSomethingCrazier();
}